작업예약 
예)전자세금계산서 마감칠때  매주 또는 매월 특정일에 자동으로 작업을 해야할때 
배치처리(한번에 몰아서 처리하는 방식을 배치-batch 처리라 한다 )
batch(배치처리) <-> realtime online 실시간처리

스프링에도 배치처리가 있다. 관점은 비슷함, 보안때문에 스프링에서 못하고 
리눅스에 직접 작업예약을 해야 하는 경우가 있다 
at - 한번만(예약)
cron - 반복적으로(예약)

at 명령어는 딱 한번만 실행된다.  리눅스에 설치되어 있지 않다. 
별도로 at 명령어를 설치해야 한다 

우분트 명령어 설치 유틸 은 apt > apt-get > apt 
at 설치하기

#sudo apt install at 

작업예약명령
at 09:40 am
at>/bin/ls ~conan > ~conan/at.out 
ctrl-d  예약완료 

ls at.out 
cat at.out 

새로운 작업 예약하기 
at 10:00 am 
at>mkdir attest 
at>cp ./findtest/*  ./attest 
ctrl-d  

sudo ls -l /var/spool/cron/atjobs 

at 10:10am  + 1 days

at 10:15am 
at>cat /etc/passwd | grep conan > at2.out 
ctrl^d 

sudo ls -l /var/spool/cron/atjobs

atq 
atrm 3       예약 삭제 
atq 

ls /etc/at*  at.deny  파일만 존재한다면 at 명령어가 이 파일에 기술된 
             아이디를 제외하고는 모두 허용된다.  


at 명령어는 예약이 한번만 실행된다. 
crontab은 반복적으로 예약이 실행된다 

매일 10시 20분에 동작한다 
분  시간 일  월 요일  작업내용을 기술한다 
40  10   1   *  *  /bin/ls -l ~conan > ~conan/cron.dat 


EDITOR=vi
export EDITOR 

사용자마다 파일을 하나씩 밖에 못갖는다 
crontab -e       #크론탭파일수정하기 
40  10   1   *  *  /bin/ls -l ~conan > ~conan/cron.dat 

파일 저장후 종료하기  ESC - :wq 

crontab -l   파일내용확인 
crontab -e 

매시간에 7분에 작업한다
한줄에 시간하고 작업 또 작업할거 있으면 아래줄에 
명령어쓸때 절대경로를 지정하자 
작동안하는 주이유 : 명령어 잘못 쓰는 경우가 대부분인 
잘 작동하는 지 확인하고 작성하자 
ls  쓰지 말고 파일있는 절대 경로로 기술하자 /bin/ls 
절대경로 모를때  which ls 라고 찾아보자    

#매시 7분에 
15  *  *  *  *  /bin/ls -l ~conan >> ~conan/cron.dat

#매일 11시 30분에 
30 11 *  *  *  /bin/cat /etc/passwd | grep conan >> cron.dat2


#파일시스템 
보조기억장치 - 외장하드(magetic) 자성을 이용한 장치, 자석을 지움 
              ssd(플래쉬메모리)-속도가 엄청남

정보를 어떤 형태로 저장하느냐 방식이 파일시스템 
윈도우 fat16  fat32  ntfs   방식 

지하철 - 9호선  기챠량수가 많으면 한번이 많이 실어나른다 
               사람이 적으면 쓸데없는 낭비가 된다 
               기차량수가 적으면 한번에 실어나르는 양은 적은데 
               쓸데없는 낭비가 없다. 

fat16 - 기본파일을 저장할때 용량이 젤 적다.  예를들면 파일하나에 최소
        1KBYTE를 사용한다고 할때 
        KOREA ->  실제 차지하는 메모리  (1k)

fat32  - 파일저장하는 2KB       (2K)
ntfs   -  4KB                   4KB 

fat16이 더 많은 파일을 저장할 수 있다. 

저장소 목록
sudo cat /etc/apt/sources.list 

sudo apt-cache stats          : 통계정보확인 
sudo apt-cache show vsftpd    : 패키지 정보 확인 
sudo apt-cache search vsftpd  : 패키지 검색

sudo apt-cache pkgnames  :  사용가능한 패키지 이름 보기 

sudo apt-cache showpkg vsftpd  : 패키지 의존성 확인하기
의존성확인 : 이 패키지 설치할때 같이 설치해야할 패키지 정보  

[apt 사용법]
sudo apt  옵션  서브명령
-d 패키지 내려받기 
-f 의존성이 깨진 패키지 수정 
-h 도움말 

서브명령 
upgrade : 현재 설치되어 있는 패키지를 업그레이드  
update  : 패키지 저장소에서 새로 가져온다 
install : 패키지를 설치한다 
remove  : 삭제 
download : 다운로드
autoclean : 불완전환 패키지나 오래된 패키지 정리 
clean : /var/cache/apt/archives 에 캐쉬된 패키지를 삭제하여 
        디스크 공간 확보 
check 의존성이 깨진 패키지 확인 

apt나 apt-get 이나 하는일 동일함 최신버전이 apt  임 
sudo apt update 
sudo apt upgrade 
sudo apt install netcat 
sudo apt remove netcat
sudo apt autoremove 
sudo apt autoclean

apt ==> snap 패키지 관리 방식으로 전환중 
sudo apt install snap 
snap list  스냅패키지 목록확인  
snap find hello-world     snap 저장소 
snap install hello-world    샘플로 만들어놓은  snap 패키지 
hello-world                 설치한 프로그램 실행하기 
snap info hello-world       패키지 상세 정보 
snap remove hello-world     패키지 삭제 


파일압축 
아카이브 - 파일과 디렉토리를 묶어서 하나의 묶음으로 만든다 
압축 - 압축이 파일 하나 단위로만 이루어진다. 

리눅스에서는  압축시
1.아카이브를 먼저 만들고 
2.아카이브를 압축한다. 

리눅스에서 압축해제는 
1. 압축풀고 
2. 아카이브 해제 

tar  cvf  아카이브파일명   디렉토리 
디렉토리를 묶어서 아카이브파일을 만든다. 

cd ~
mkdir tmp
sudo cp -r /var/* tmp    둘이 동일한 명령어다  
sudo cp -r /var/* ./tmp  파일이 너무 커서 디스크 공간 부족 

sudo rm -rf tmp  폴더 통째로 삭제  
mkdir tmp        디렉토리 다시 만들었음
cp *.txt tmp     
tar cvf  tmp.tar  tmp
ls tmp.tar 

아카이브를 만들어도 원본은 그대로 있다 

아카이브 내용 확인하기 
tar tvf tmp.tar 

아카이브 풀기 :   xvf  옵션 사용 

mkdir tmp2            새로 폴더 만들고 
cp tmp.tar tmp2       새로운 폴더로 아카이브파일 복사하기 
cd tmp2               디렉토리 이동 
tar xvf tmp.tar  

cd ..                tmp폴더로 이동해서 
cd tmp
touch data           파일을 data a b c 4개 더 만들었음
toucn a b c 

cd ..
tar uvf tmp.tar    파일 정보가 변경된것들만 업데이트 된다

rm tmp.tar 지우고 
tar cvf tmp.tar  tmp    다시 만든다 

일부분 수정사항이 있을때 u 
파일 하나씩 추가하고 싶으면 r 

압축 :  gzip 


gzip tmp.tar 
ls 
원본인 tar.gz  라는 확장자를 붙인다 

ls -l > a.out 

gzip a.out 

ls 


아카이브를 하면서 동시에 압축하기 - 옵션에 z를 추가한다 
tar cvzf tmp2.tar.gz tmp 

#압축풀기 
gunzip tmp2.tar.gz 
tar xvf tmp2.tar 



# c컴파일러 추가하기 
sudo apt install gcc 
gedit hello.c

#include <stdio.h>
int main(){
    printf("Hello CWorld\n");
    return 0;
}

gcc hello.c   컴파일 
./a.out       실행하기 

gcc hello.o   hello.c 
./hello 


아이피 : 고정아이피   자동아이피(유동아이피)-랜선 뺐다 끼면 아이피 바뀐다
고정아이피 서비스 - ip4  

후이즈, 카페24 - 호스팅 비용중에 자바랑 오라클이 젤 비쌈 
도메인 사서 연결해도 되고 그냥 써도 되고  톰캣 와스가 
새로운 사이트 구축하면 서버를 내렸다 올려야 한다 
그래서 각자 자기 영역에 톰캣 설치하고 오라클설치하고 메모리를 많이 사용한다 
호스팅 - PHP 는 무료도 많다.
AWS - 아마존 클라우드, 1년간 무료사용 가능, 고정아이피서비스는 비용필요
네이버 클라우드 - 한달, 그이후에 부가되는 비용이 비싸다
                오라클 라이선스 없어서 mysql  쓴다 
                파이썬 nodejs - mysql하고 잘맞음 
                대부분의 기업 스프링 기반 오라클, weblogic나  jeus(티맥스)  
Firebase - 구글 프로젝트관리겸 호스팅 지원한다 

호스팅서버 만들려면 개인별로 디스크용량 정해줘야 한다 
lms - 온라인교육시스템, 디비에 로그파일에 수십만개  그런경우 실제 데이터 용량보다 
      더 차지할 수 도 있다 일정시간 지나면 로그도 찾아서 지우자 

cat /etc/shadow  

사용자를 만들 수 있는 계정은 root 
sudo passwd root 
su 

useradd test1    #홈디렉토리가 안만들어진다. 
cd ~test1        #에러 발생 

useradd -m  test2 #계정생성시 홈디렉토리를 생성한다   
cd ~test2 

tail -3  /etc/passwd 

옵션 
-s 쉘지정 
-m 폴더만들기 
-u 사용자식별값 
-g 속할그룹  
useradd -s /bin/bash -m -u 2000 -g 1000 test3 

계정을 만들때 그룹지정을 안하면 그룹도 만든다 계정명과 같은 그룹을 만들어서 그 그룹에 
속한다 

gedit /etc/passwd 
gedit /etc/group  

사용자 정보 수정하기 -  add하고 동일한 옵션들 사용 
쉘변경하기  
usermod -s /bin/bash test1
tail -5 /etc/passwd 
su test1  계정변경 

자기비밀번호 수정 
passwd 1234 

























































































