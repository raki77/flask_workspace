

application            
-----------
shell             ls, cp, rm 명령어를 해석해서 kernel에 저달한다 
------------
kernel
------------
hw

쉘은 명령어 해석기다. 사용자가 명령어를 입력하면 이 명령어를 해석해서 
커널에 전달한다. 

각자 개인의 환경설정, 쉘프로그래밍 

로그온 쉘확인하기
sudo gedit /etc/passwd 

sudo grep conan /etc/passwd 

sudo vi /etc/passwd  
ESC - gg  :  커서를 맨앞으로 
ESC - /conan  : 문서내에서의 검색 

쉘변경하기 : chsh 명령어 
변경가능한 쉘 확인 - 우리 시스템에서 제공하는 쉘을 보자 
/etc/shells 파일을 확인하자 

sudo cat /etc/shells
sudo gedit /etc/shells
sudo vi /etc/shells

root 가 쉘바꾸기 
chsh -s sh      에러 
chsh -s /bin/sh  conan 전체 경로를 다 기술해야 한다   

내가 내거 바꿀때 
/bin/sh 
ls 
화살표 눌러서 히스토리 기능 안되는거 확인 
exit - 본래의 쉘로 돌아간다 

user02의 쉘을 /bin/sh -> /bin/bash로 바꾼다 
sudo  chsh -s /bin/bash user02 
su user02                        계정전환하기 
sudo passwd user01              패스워드 수정하기 

root 나 로그온 계정 
sudo  chsh -s /bin/bash conan 
sudo  chsh -s /bin/bash user01  
sudo  chsh -s /bin/bash user03 

root 비밀번호 수정하기 
sudo passwd root 


쉘이 자체적으로 가지고 있는 명령어 확인 
which cd   --  아무것도 안나옴, 쉘이 가지고 있는 명령어 
which ls   -- /bin/ls 
cat /bin/ls 
file /bin/ls   LSB shared object - binary  임 

which rmdir 

cd /bin 
ls -l | more 

which find 
cd /usr/bin 
ls -l | more 
ls -l | grep find 


echo  명령어 
echo linux 
echo linux ubuntu 
echo "linux ubuntu"

bash쉘의 출력명령어 : printf  c언어에 존재한 함수 

printf Hello 
printf "Hello Shell Script" 
printf "%d\n" 100       
printf "%d + %d = %d\n" 10 10 20 

a = 10 
b = 20
printf "%d + %d = %d\n" $a $b $((a+b))




ls 현재디렉토리 
ls * 서브디렉토리까지 

cd ~
ls 
ls *

폴더 만들고  현재 디렉토리의 모든 파일을 tmp로 복사하기 
mkdir tmp 
cp * /tmp 

상위디렉토리로 파일 복사하기 
cd findtest 
cp *  ../tmp 
ls ../tmp         

ls ../../tmp 내가 있는 위치에 따라서 이런식으로도 가능하다 


cd ~ 
mkdir wildcardtest 
cd wildcardtest 
touch t t1 t2.txt t3.txt  ta.txt  tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 한글1 한글2 
한글anc 
ls -l 

ls t?.txt    t2.txt t3.txt ta.txt 파일 출력됨 
la t[23].txt    t 다음에 올 문자가 2 나 3임  t2.txt t3.txt 
ls t*.txt     t로시작하면서 확장자가  txt 인 파일
ls t*         t로 시작하는 모든 파일  
ls -l tmp[146]*  tmp1~  tmp4~ tmp6~
ls -l tmp[3-6]   tmp3 tmp4 tmp5 tmp6 
          3-6 : 2~6까지라는 의미임 

ls [A-Za-z]*  영문자로 시작하는 

ls [^A-Za-z]* 영문자 제외    ^기호를 []안에 쓰면 을 제외하고의 의미이다 


; 문자 - 명령어를 차례로 실행 , 한줄에 여러개의 명령어를 쓸 수 있게 
date;ls;pwd;
ls -al | more 


$SHELL - 리눅스에서 사용하는 변수들, 쉘값이 들어가서 
echo $SHELL   변수에 저장된 값이 출력 

echo "$SHELL"
echo '$SHELL'

"큰따옴표    '작은따옴표  `백틱 
``-백틱 (키보드 왼쪽끝에 물결무늬 아래키)
echo  "Today is `date`"
ls /usr/bin/`uname -m` 

cd ~ 
ls -l wildcardtest/t* 
ls -l wildcardtest/t\*      \가 * 기능을 무력화- error 발생 
echo \$SHELL   \가 $기능을 무력화 한다  
echo '$SHELL' 과 동일한 효과 

cd ~

mkdir -p linux_ex/ch4 
cd linux_ex/ch4
ls out1   파일 없음 
ls -al 
ls -al > out1    #출력장치를 파일로 바꾼다 
ls -al 
date >out1      #파일의 내용을 지우고 새로운 내용으로 덮어쓰기 한다 

cat out1 
ls -l >&1   뛰어쓰기 없이 장비번호에 &를 붙여야 한다 
ls -l

표준 오류 메시지를 다른곳으로 
ls /abc  -- 오류가 발생한다 
오류메시지를 파일로 
ls /abc 2> ls.err       : 2> 표준 에러 출력장치임 
cat ls.err 

뛰어쓰기 안됨 
ls -a 1> out2  1번장치의 출력을 out2로 바꾸어라 
ls -a > out3 
ls /abc 2> ls.err 2번장치는 생략불가 
cat ls.err    

#표준출력과 표준 오류룰 한 파일로 리다이렉션 하자 
#뛰어쓰기 마음대로 하지 말자 
ls -l /abc > ls.out   2>&1
cat ls.out 

cat out1 

cat <out1 

#sort는 out1파일을 입력으로 받아서 정렬 후 out2에 저장한다 
sort < out1 > out2 


set :전체 변수 출력 , 쉘변수,환경변수 모두 출력 

ls /abc 2> ls.err

set > set.txt 
vi set.txt 
ESC gg 
ESC -q 

echo $HOSTNAME
env > env.txt 
vi env.txt 

#변수와 = 값 사이에 공백 있으면 안된다. 
SOME=test  쉘변수 만들기 
echo $SOME 

env | grep SOME   없다고 나옴 

우리가 만든 변수를 환경변수에 등록 
export SOME     
env | grep SOME

export -n SOME  환경변수에서 제거하기 
env | grep SOME

변수 해제하기 -  
unset SOME  쉘변수제거 
echo $SOME 

에일리어스  - 별명을 준다 
alias   이미 등록된 별명들을 준다 

alias  ml='ls;ls -a;ls -al'
ml

unalias ml   해제 
alias 

history   그동안 진행했던 명령어 다 갖고 있음 

!94 
!l 

cd ~ 
cat .profile 
source .profile   바뀐값을 적용한다. 또는  재부팅을 하면 된다. 

리눅스는 계정을 그룹밑에 계정을 종속시킨다
그룹을 만들고 계정을 만들어도 되는데 계정을 만들면 계정이 속한 그룹을 만든다. 
계정을 만들때마다 그룹이 만들어진다. 
/etc/passwd 파일의 
conan:x:1000:1000    :1000(자기식별값):1000 - 그룹식별값 
user01 :1001 
user02 :1002 

파일을 생성하면 파일을 만든사람이 소유권자가 된다. 

- 파일 
d 디렉토리 
d  소유권자권한  그룹권한  게스트권한 

cd ~ 
touch file1 
ls -al file1 
- rw- rw- r--  소유권자랑 그룹은 읽고 쓰기 가능, 나머지는  r만 가능 

그룹에 대한 파일확인 
cat /etc/group 
사용자 추가 
sudo useradd -m -g 1000 -s /bin/bash conan2 
-m : 홈디렉토리 만들어라 
-g : 그룹지정 
-s : 기본쉘지정 
아이디 

cat /etc/passwd |grep conan 
sudo passwd conan2 
su conan2 
touch file1    # 소유권자:conan   같은그룹내의 conan2가 파일을 변경했는데 에러없음 

권한을 바꾸자 
- rw- r-- r--       110 100 100 
su conan 
chmod 644 file1 
ls -l file1 
su conan2 
touch file1       소유권자만  rw가 가능해서 오류발생한다 

-- 실행파일의 경우 실행 권한을 주어야 한다. 
whoami 계정확인명령어  
pwd    경로확인명령어 
su conan 
cd ~

mkdir permissiontest 
ls -l permissiontest
drwxrwxr-x 

su user01 
cd permissiontest
touch file1 ---error 

#디렉토리의 경우 x가 있어야 cd명령이 먹힌다. 
su conan 
chmod 774  permissiontest       외부사용자는 읽기만 가능하다   111 111 1--
su user01 
cd permissiontest


######################
프로세스 관리하기 
######################
 
프로그램을 가동을 하면 커널이 프로그램이 가동될수 있도록 메모리나 자원을
할당한다. 이때 각 메모리는 서로 침범불가 각각의 프로세스는 완전히 독립되어
수행되기 때문에  서로 영향을 주고 받지 않는다. 
멀티프로세스 문제 : 하나의 일을 여러개의 프로세스가 협력하면서 일을 
진행해야 한다. 대표적으로 네트워크 관련 프로그램 
예)카톡 : 데이터를 보내는 시점은 보내기 버튼을 누른 시점에 알지만 
        상대방으로부터 데이터를 수신하는 시점은 모른다. 
        그래서 다른 프로세스가 계속 데이터 수신을 기다리고 있다가 
        수신되었음을 알려준다. 
최소 두개이상의 프로세스가 작업을 공유해야 한다. 그런데 모두 독립이라 
데이터를 주고 받을 방법이 없다. 이때 등장하는것이 IPC(Inter Process
Communication) 이다. 각각의 프로세스는 독립이라 프로세스안의 데이터를 
다른 프로세스로 전달할 방법이 없다. 그래서 OS가 파이프나 또다른 수단을 
동원해 프로세스간에 데이터를 주고 받는 방법을 고안했음 
멀티프로세싱은 초창기에 많이 사용되었고  부모프로세스를 종료할때 
자식프로세스가 종료되지 않고 남아서 고아가 되는 문제처리가 힘들다
지금은 거의 사용하지 않고 있다 
멀티스레딩 : 하나의 프로세스를 여러개의 조각으로 나누고 이를 스레드라 한다 
위의 문제점들 때문에 한동안 멀티스레딩 프로그램을 많이 진행했음 
멀티스레드는 동일 프로세스를 조각냈기 때문에 데이터를 주고 받기는 쉬움 
문제는 공유메모리를 사용할때 여러개의 스레드가 다툼이 벌어지기 때문에 
하나의 스레드가 공유메모리를 사용할때 잠금같은 방법을 써서 잠그고 들어가서 
공유메모리를 사용하고 나오면 다른 스레드가 공유메모리를 사용하는 방식이고 
이걸 동기화(synchroize) 라고 한다.- 톰캣이 대표적인 멀티스레딩 프로그램이다 
비동기방식 : 현재 최신 추세, 포어그라운드에서는 프로세스가 하나가 도는데 
시스템 내부에서 여러개의 스레드나 프로세스가 돌면서 작업을 해준다 
사용자는  콜백함수를 전달해서 백그라운드에서 시스템이 작업한 내용을 알려주게
한다.  프로그램 방식은 비동기 방식이 가장 쉽고 실행 속도 자체도 빠르다 
(nodejs가 이방식을 사용한다 )   






프로세스 

ps 

ps -ef 

ps -ef | grep bash 

ps ax | more     시스템에서 실행중인 모든 프로세스를 출력

ps -ef | grep ps 

프로세스 목록에서 검색
pgrep -x bash    --  패턴에 맞추어서 검색 
pgrep -u conan   -- 사용자명으로 검색

프로세스아이디만 반환   그래서 ps 명령어와 같이 사용한다 
-f 상세  p 프로세스 아이디로 찾겠다  
ps -fp 1818 

ps -fp $(pgrep -x bash)

$(pgrep -x bash) 프로세스 아이디 

ps -ef | grep tomcat 

kill -l 

프로세스 종료 
ps -ef | grep tomcat
kill pid 
kill -9 pid     프로세스 강제 종료 


본쉘을 가동 
/bin/sh 

프로세스 아이디 확인 
ps -ef |grep /bin/sh 

프로세스 강제종료 
kill -9 pid 

top 계속 프로세스 정보를 새로고침해준다 

sleep 100   sleep 초단위 

시간이 많이 걸리는 일들을 백그라운드에서 실행하자 
sleep 100 &  백그라운드에서 실행한다 
jobs 

루트부터 passwd 이름을 갖는 파일을 찾아서 pw.dat에 저장 
혹시 오류생기면 오류도  pw.dat  에 저장 
맨뒤에 & 백그라운드로 실행하라  
find / -name passwd > pw.dat  2>&1   &

포그라운드 <-> 백그라운드 서로 전환하기 
ctrl-z 누르고 잠시 정지 
bg  
fg 
작업종료 : ctrl-c 

sleep 100   
ctrl-z 
bg 








































































